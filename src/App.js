import React, { useState, useEffect, useRef } from "react";
import { BrowserProvider, Contract } from "ethers";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./App.css";
import abi from "./ClickCounterABI.json";
import bgMusicFile from "./assets/sounds/dont-talk.mp3";
import clickSoundFile from "./assets/effects/click.mp3";
import { Analytics } from "@vercel/analytics/react";
import { FaXTwitter } from "react-icons/fa6";

const CONTRACT_ADDRESS = "0x0b9eD03FaA424eB56ea279462BCaAa5bA0d2eC45";
const TEA_CHAIN_ID_HEX = "0x27EA"; // Tea Sepolia (10218)

function App() {
  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [contract, setContract] = useState(null);

  const [totalClicks, setTotalClicks] = useState(0);
  const [myClicks, setMyClicks] = useState(0);

  const [leaderboard, setLeaderboard] = useState([]);
  const [totalUsers, setTotalUsers] = useState(0);
  const [userRank, setUserRank] = useState(null);
  const [totalSystemCheckIns, setTotalSystemCheckIns] = useState(0);
  const [showFullStats, setShowFullStats] = useState(false);

  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isMuted, setIsMuted] = useState(true);

  const bgMusicRef = useRef(null);
  const clickAudioRef = useRef(null);

  const [pendingTransactions, setPendingTransactions] = useState(new Set());

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 50;

  const [myTodayClicks, setMyTodayClicks] = useState(0);

  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Leaderboard ‡∏ã‡πâ‡∏≥
  const [didLoadLB, setDidLoadLB] = useState(false);

  // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà leaderboard ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
  const [lastLeaderboardUpdate, setLastLeaderboardUpdate] = useState(null);

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Gm ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
  const [checkedInToday, setCheckedInToday] = useState(false);
  const [totalCheckIns, setTotalCheckIns] = useState(0);
  const [checkInStreak, setCheckInStreak] = useState(0);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm
  const [showCheckInModal, setShowCheckInModal] = useState(false);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const [appLoaded, setAppLoaded] = useState(false);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ state ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
  const [isOnCorrectNetwork, setIsOnCorrectNetwork] = useState(false);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô delay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á transaction
  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ transaction ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const [lastTxTime, setLastTxTime] = useState(0);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å wallet
  const [showWalletModal, setShowWalletModal] = useState(false);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å wallet
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const detectWallets = () => {
    const wallets = [];
    
    if (window.ethereum) {
      // MetaMask
      if (window.ethereum.isMetaMask) 
        wallets.push({ name: "MetaMask", provider: window.ethereum, icon: "ü¶ä" });
      
      // Coinbase
      if (window.ethereum.isCoinbaseWallet) 
        wallets.push({ name: "Coinbase", provider: window.ethereum, icon: "üì±" });
      
      // Trust Wallet
      if (window.ethereum.isTrust) 
        wallets.push({ name: "Trust", provider: window.ethereum, icon: "üîí" });
      
      // Brave
      if (window.ethereum.isBraveWallet) 
        wallets.push({ name: "Brave", provider: window.ethereum, icon: "ü¶Å" });
      
      // ‡∏°‡∏µ wallet ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏î‡πâ
      if (wallets.length === 0) {
        wallets.push({ name: "Browser Wallet", provider: window.ethereum, icon: "üåê" });
      }
    }
    
    return wallets;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å wallet
  const openWalletSelector = () => {
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    if (isConnected || isConnecting) return;
    
    const availableWallets = detectWallets();
    
    if (availableWallets.length === 0) {
      toast.error("‡πÑ‡∏°‡πà‡∏û‡∏ö wallet ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask ‡∏´‡∏£‡∏∑‡∏≠ wallet ‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }
    
    if (availableWallets.length === 1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á wallet ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      connectWallet();
      return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å wallet
    setShowWalletModal(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å wallet
  const handleSelectWallet = (provider) => {
    window.ethereum = provider;
    setShowWalletModal(false);
    connectWallet();
  };

  // Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å wallet
  const WalletSelectorModal = () => {
    if (!showWalletModal) return null;
    
    const wallets = detectWallets();
    
    return (
      <div className="modal-overlay">
        <div className="modal-content wallet-modal">
          <div className="modal-header">
            <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Wallet</h2>
            <button className="close-button" onClick={() => setShowWalletModal(false)}>√ó</button>
          </div>
          <div className="modal-body">
            <div className="wallet-list">
              {wallets.map((wallet, index) => (
                <button
                  key={index}
                  className="wallet-button"
                  onClick={() => handleSelectWallet(wallet.provider)}
                >
                  <span className="wallet-icon">{wallet.icon}</span>
                  <span className="wallet-name">{wallet.name}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á BGM + Sound Effect
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  useEffect(() => {
    bgMusicRef.current = new Audio(bgMusicFile);
    bgMusicRef.current.loop = true;
    bgMusicRef.current.muted = isMuted;

    clickAudioRef.current = new Audio(clickSoundFile);

    return () => {
      bgMusicRef.current?.pause();
      clickAudioRef.current?.pause();
    };
  }, []);

  useEffect(() => {
    if (!bgMusicRef.current) return;
    bgMusicRef.current.muted = isMuted;
    if (!isMuted) {
      bgMusicRef.current
        .play()
        .catch((err) => console.log("BGM autoplay blocked:", err));
    }
  }, [isMuted]);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå leaderboard.json ‡∏à‡∏≤‡∏Å Off-chain
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const loadOffChainLeaderboard = async () => {
    try {
      const res = await fetch("/leaderboard.json");
      if (!res.ok) throw new Error("Failed to fetch leaderboard.json");

      const jsonData = await res.json();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
      let leaderboardData = [];
      let lastUpdateTimestamp = null;

      if (jsonData.data && jsonData.lastUpdate) {
        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ timestamp
        leaderboardData = jsonData.data;
        lastUpdateTimestamp = new Date(jsonData.lastUpdate);
      } else {
        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á timestamp)
        leaderboardData = jsonData;
        lastUpdateTimestamp = null; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á timestamp ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }

      leaderboardData.sort((a, b) => Number(b.clicks) - Number(a.clicks));

      setLeaderboard(leaderboardData);
      setTotalUsers(leaderboardData.length);
      setLastLeaderboardUpdate(lastUpdateTimestamp);

      if (signer) {
        try {
          const addr = await signer.getAddress();
          console.log("Current address:", addr);
          
          const userIndex = leaderboardData.findIndex(
            (x) => x.user.toLowerCase() === addr.toLowerCase()
          );
          
          console.log("User index in leaderboard:", userIndex);
          
          if (userIndex >= 0) {
            const rank = userIndex + 1;
            console.log("Setting user rank to:", rank);
            setUserRank(rank);
          } else {
            console.log("User not found in leaderboard, setting rank to null");
            setUserRank(null);
          }
        } catch (error) {
          console.error("Error finding user rank:", error);
          setUserRank(null);
        }
      } else {
        console.log("No signer available, can't determine user rank");
      }
      
      console.log("Off-chain leaderboard loaded!");
    } catch (err) {
      console.error(err);
      toast.error("Unable to load offline leaderboard.");
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ Tea Sepolia ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const setupNetwork = async (forceCheck = false) => {
    if (!window.ethereum) {
      toast.error("Please install MetaMask!");
      return false;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!forceCheck && isOnCorrectNetwork) {
      return true;
    }
    
    try {
      const currentChainId = await window.ethereum.request({
        method: "eth_chainId",
      });
      if (currentChainId !== TEA_CHAIN_ID_HEX) {
        try {
          await window.ethereum.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: TEA_CHAIN_ID_HEX }],
          });
        } catch {
          toast.error("Please switch to Tea Sepolia manually");
          setIsOnCorrectNetwork(false);
          return false;
        }
      }
      setIsOnCorrectNetwork(true);
      return true;
    } catch {
      toast.error("Network setup failed");
      setIsOnCorrectNetwork(false);
      return false;
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• on-chain ‡πÄ‡∏ä‡πà‡∏ô totalClicks, userClicks
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const loadBlockchainData = async () => {
    try {
      const prov = new BrowserProvider(window.ethereum);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timeout ‡∏ó‡∏µ‡πà‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error("Connection timeout")), 15000)
      );
      
      try {
        // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á timeout
        const sign = await Promise.race([
          prov.getSigner(),
          timeoutPromise
        ]);
        
        const cont = new Contract(CONTRACT_ADDRESS, abi, sign);
        
        setProvider(prov);
        setSigner(sign);
        setContract(cont);

        const addr = await sign.getAddress();
        
        // ‡πÉ‡∏ä‡πâ Promise.race ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å RPC ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
        const [total, mine] = await Promise.all([
          Promise.race([cont.totalClicks(), timeoutPromise]),
          Promise.race([cont.userClicks(addr), timeoutPromise])
        ]);

        setTotalClicks(Number(total));
        setMyClicks(Number(mine));
        setIsConnected(true);
        return true;
      } catch (timeoutErr) {
        console.error("Connection timeout or RPC error:", timeoutErr);
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î RPC ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if (timeoutErr.message && timeoutErr.message.includes("HTTP request failed")) {
          toast.error("Network connection error. Please try again later.");
        } else {
          toast.error("Connection timeout. Please try again later.");
        }
        
        return false;
      }
    } catch (err) {
      console.error("Unable to load data:", err);
      toast.error("Unable to load data. Please check your connection.");
      return false;
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const loadUserGmData = async () => {
    try {
      // ‡∏î‡∏∂‡∏á wallet address ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const userAddress = await signer?.getAddress();
      
      if (!userAddress) {
        setCheckedInToday(false);
        setCheckInStreak(0);
        setTotalCheckIns(0);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡πÉ‡∏ä‡πâ address ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö)
      const checkedInToday = localStorage.getItem(`checkedInToday_${userAddress}`);
      const lastCheckInDate = localStorage.getItem(`lastCheckInDate_${userAddress}`);
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• streak ‡πÅ‡∏•‡∏∞ total
      const streak = parseInt(localStorage.getItem(`checkInStreak_${userAddress}`)) || 0;
      const total = parseInt(localStorage.getItem(`totalCheckIns_${userAddress}`)) || 0;
      
      console.log(`Checking GM data for user ${userAddress}: streak=${streak}, total=${total}`);
      
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const cacheKey = `_t=${Date.now()}`;
        
        // ‡πÉ‡∏ä‡πâ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡πÄ‡∏î‡∏£‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
        const userPrefix = userAddress.substring(2, 4).toLowerCase();
        const userStatsUrl = `/stats/users/${userPrefix}/${userAddress.toLowerCase()}.json?${cacheKey}`;
        
        console.log(`Trying to load user stats from: ${userStatsUrl}`);
        
        const userResponse = await fetch(userStatsUrl, {
          cache: "no-store"
        });
        
        if (userResponse.ok) {
          // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          const userData = await userResponse.json();
          console.log("Loaded user stats:", userData);
          
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ totalCheckIns ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          if (userData.totalCheckIns) {
            console.log(`Found user's totalCheckIns in user file: ${userData.totalCheckIns}`);
            localStorage.setItem(`totalCheckIns_${userAddress}`, userData.totalCheckIns.toString());
            setTotalCheckIns(userData.totalCheckIns);
          } else {
            console.log("No totalCheckIns found in user file, using localStorage");
            setTotalCheckIns(total);
          }
          
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ streak ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          if (userData.currentStreak) {
            console.log(`Found user's currentStreak in user file: ${userData.currentStreak}`);
            localStorage.setItem(`checkInStreak_${userAddress}`, userData.currentStreak.toString());
            setCheckInStreak(userData.currentStreak);
          } else if (userData.maxStreak) {
            console.log(`Found user's maxStreak in user file: ${userData.maxStreak}`);
            localStorage.setItem(`checkInStreak_${userAddress}`, userData.maxStreak.toString());
            setCheckInStreak(userData.maxStreak);
          } else {
            console.log("No streak info found in user file, using localStorage");
            setCheckInStreak(streak);
          }
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
          const serverDate = new Date(userData.lastCheckIn);
          const todayDate = new Date();
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const isSameDay = 
            serverDate.getFullYear() === todayDate.getFullYear() &&
            serverDate.getMonth() === todayDate.getMonth() &&
            serverDate.getDate() === todayDate.getDate();
          
          if (isSameDay) {
            console.log("User has checked in today according to user file");
            localStorage.setItem(`checkedInToday_${userAddress}`, "true");
            setCheckedInToday(true);
            return true;
          } else {
            console.log("User has not checked in today according to user file");
            setCheckedInToday(checkedInToday === "true");
          }
          
          return checkedInToday === "true";
        } else {
          console.log("Failed to load user stats file, using localStorage values only");
          // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å localStorage
          setCheckedInToday(checkedInToday === "true");
          setCheckInStreak(streak);
          setTotalCheckIns(total);
          
          return checkedInToday === "true";
        }
      } catch (error) {
        console.error("Error loading user stats:", error);
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å localStorage
        setCheckedInToday(checkedInToday === "true");
        setCheckInStreak(streak);
        setTotalCheckIns(total);
        
        return checkedInToday === "true";
      }
    } catch (error) {
      console.error("Error loading GM data:", error);
      return false;
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // Connect Wallet
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const connectWallet = async () => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
    if (isConnected || isConnecting) {
      console.log("Already connected or connecting, skipping connection");
      return true;
    }

    // ‡∏•‡∏ö toast ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡∏°‡πà
    toast.dismiss();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    setIsConnecting(true);

    try {
      if (bgMusicRef.current) {
        bgMusicRef.current.muted = false;
        setIsMuted(false);
        try {
          await bgMusicRef.current.play();
        } catch {}
      }

      await window.ethereum.request({ method: "eth_requestAccounts" });
      if (!(await setupNetwork())) {
        setIsConnecting(false);
        return false;
      }
      if (!(await loadBlockchainData())) {
        setIsConnecting(false);
        return false;
      }

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î Leaderboard -> ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      if (!didLoadLB) {
        await loadOffChainLeaderboard();
        setDidLoadLB(true);
      } else {
        console.log("Leaderboard already loaded, checking rank directly");
        // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        if (signer && leaderboard.length > 0) {
          try {
            const addr = await signer.getAddress();
            console.log("Finding rank for address in connectWallet:", addr);
            
            const userIndex = leaderboard.findIndex(
              entry => entry.user.toLowerCase() === addr.toLowerCase()
            );
            
            console.log("User index in connectWallet:", userIndex);
            
            if (userIndex >= 0) {
              const rank = userIndex + 1;
              console.log("Setting user rank in connectWallet to:", rank);
              setUserRank(rank);
            } else {
              console.log("User not found in existing leaderboard in connectWallet");
              // Instead of setting to null, check if we have clicks and create a temporary entry
              if (myClicks > 0) {
                console.log("User has clicks, adding to temporary leaderboard");
                const tempLeaderboard = [...leaderboard, { user: addr, clicks: myClicks }];
                tempLeaderboard.sort((a, b) => Number(b.clicks) - Number(a.clicks));
                const newIndex = tempLeaderboard.findIndex(
                  entry => entry.user.toLowerCase() === addr.toLowerCase()
                );
                setLeaderboard(tempLeaderboard);
                setUserRank(newIndex + 1);
              } else {
                // Only set to null if we have no clicks
                setUserRank(null);
              }
            }
          } catch (error) {
            console.error("Error finding user rank in connectWallet:", error);
          }
        }
      }

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await loadUserGmData();

      toast.success("Connected successfully! üéâ");
      return true;
    } catch (err) {
      if (err.code === 4001) toast.error("Connection rejected by user");
      else toast.error("Connection failed");
      return false;
    } finally {
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      setIsConnecting(false);
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° CLICK
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const handleClick = async () => {
    try {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
      if (!isConnected) {
        await connectWallet();
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ contract ‡πÅ‡∏•‡∏∞ signer
      if (!contract || !signer) {
        toast.error("Please connect your wallet first");
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (!(await setupNetwork())) return;

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
      if (!isMuted) {
        clickAudioRef.current.currentTime = 0;
        clickAudioRef.current.play().catch(() => {});
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
      const now = Date.now();
      const timeSinceLastTx = now - lastTxTime;
      if (timeSinceLastTx < 300) { // ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        const waitTime = 300 - timeSinceLastTx;
        toast.info(`Please wait ${Math.ceil(waitTime/1000)} seconds before next click`);
        await delay(waitTime);
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á transaction ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      setLastTxTime(Date.now());

      // ‡∏™‡πà‡∏á transaction ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ gas price
      const tx = await contract.click();
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° transaction ‡πÑ‡∏õ‡∏ó‡∏µ‡πà pending ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optimistic)
      setPendingTransactions((prev) => new Set(prev).add(tx.hash));
      setMyClicks(prev => prev + 1);
      setTotalClicks(prev => prev + 1);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const userAddress = await signer.getAddress();
      setMyTodayClicks((prev) => {
        const next = prev + 1;
        localStorage.setItem(`myTodayClicks_${userAddress}`, next.toString());
        return next;
      });

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á transaction ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå
      toast.info(
        <div>
          Transaction sent! 
          <br />
          <a
            href={`https://sepolia.tea.xyz/tx/${tx.hash}`}
            target="_blank"
            rel="noopener noreferrer"
            style={{ color: "#4fd1c5" }}
          >
            View on Explorer
          </a>
        </div>
      );

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å pending ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠ confirmation)
      setTimeout(() => {
        setPendingTransactions(prev => {
          const next = new Set(prev);
          next.delete(tx.hash);
          return next;
        });
      }, 30000);
      
    } catch (err) {
      console.error("Click error:", err);
      
      if (err.error && err.error.status === 429) {
        toast.warning("Too many requests. Please wait a moment before clicking again.");
        await delay(3000);
      } else if (err.code === "INSUFFICIENT_FUNDS") {
        toast.error("Not enough TEA for gas");
      } else if (err.code === "ACTION_REJECTED") {
        toast.error("Transaction rejected by user");
      } else {
        toast.error("An unexpected error occurred");
      }
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // useEffect ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: Auto-Connect / ‡∏´‡∏£‡∏∑‡∏≠ Load Offchain LB ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ wallet
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  useEffect(() => {
    loadTodayClicksFromLocal();
    loadGmSummaryData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏à‡∏≤‡∏Å summary.json

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    setAppLoaded(true);

    if (!window.ethereum) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ MetaMask -> ‡πÇ‡∏´‡∏•‡∏î leaderboard ‡πÅ‡∏ö‡∏ö off-chain ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      loadOffChainLeaderboard();
      setDidLoadLB(true);
      return;
    }

    window.ethereum.request({ method: "eth_accounts" }).then((accs) => {
      if (accs.length > 0 && !isConnecting) {
        // ‡∏°‡∏µ accounts -> ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ connectWallet ‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á toast)
        setIsConnecting(true);

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        setShowCheckInModal(false);

        (async () => {
          try {
            if (bgMusicRef.current) {
              bgMusicRef.current.muted = false;
              setIsMuted(false);
              try {
                await bgMusicRef.current.play();
              } catch {}
            }

            await window.ethereum.request({ method: "eth_requestAccounts" });
            if (!(await setupNetwork())) return;
            if (!(await loadBlockchainData())) return;

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î Leaderboard -> ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            if (!didLoadLB) {
              await loadOffChainLeaderboard();
              setDidLoadLB(true);
            }

            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            await loadUserGmData();

            // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ showCheckInModal = true ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏µ‡πà‡∏°‡∏µ dependency ‡πÄ‡∏õ‡πá‡∏ô isConnected, signer, isConnecting ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£

            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            console.log("Connected automatically");
          } finally {
            setIsConnecting(false);
          }
        })();
      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ account -> ‡πÇ‡∏´‡∏•‡∏î leaderboard off-chain
        loadOffChainLeaderboard();
        setDidLoadLB(true);
      }
    });

    const handleChainChange = (chainId) => {
      if (chainId !== TEA_CHAIN_ID_HEX) {
        setIsConnected(false);
        setIsOnCorrectNetwork(false);
        toast.error("Please switch to Tea Sepolia");
      } else {
        setIsOnCorrectNetwork(true);
        loadBlockchainData();
      }
    };

    const handleAccountsChange = async (accounts) => {
      if (accounts.length === 0) {
        setIsConnected(false);
      } else {
        await loadBlockchainData();
        // ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î leaderboard off-chain ‡∏ã‡πâ‡∏≥
      }
    };

    window.ethereum.on("chainChanged", handleChainChange);
    window.ethereum.on("accountsChanged", handleAccountsChange);

    return () => {
      window.ethereum.removeListener("chainChanged", handleChainChange);
      window.ethereum.removeListener("accountsChanged", handleAccountsChange);
    };
  }, []);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Gm state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô wallet
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  useEffect(() => {
    if (signer) {
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ signer ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô wallet) ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡πÉ‡∏´‡∏°‡πà
      loadUserGmData();
      loadTodayClicksFromLocal();
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ signer ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
      setCheckedInToday(false);
      setCheckInStreak(0);
      setTotalCheckIns(0);
      setMyTodayClicks(0);
    }
  }, [signer]); // dependency ‡πÄ‡∏õ‡πá‡∏ô signer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á wallet

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const loadTodayClicksFromLocal = async () => {
    try {
      const today = new Date().toDateString();
      
      if (signer) {
        const userAddress = await signer.getAddress();
        const storedDate = localStorage.getItem(`clickDate_${userAddress}`);
        const storedValue = localStorage.getItem(`myTodayClicks_${userAddress}`);

        if (storedDate === today && storedValue) {
          setMyTodayClicks(Number(storedValue));
        } else {
          localStorage.setItem(`clickDate_${userAddress}`, today);
          localStorage.setItem(`myTodayClicks_${userAddress}`, "0");
          setMyTodayClicks(0);
        }
      } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ signer ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        setMyTodayClicks(0);
      }
    } catch (err) {
      console.error("Error loading today's clicks:", err);
      setMyTodayClicks(0);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏à‡∏≤‡∏Å summary.json
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const loadGmSummaryData = async () => {
    try {
      // ‡πÉ‡∏ä‡πâ cache breaker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ browser cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
      const cacheKey = `_t=${Date.now()}`;
      const response = await fetch(`/stats/summary.json?${cacheKey}`, {
        cache: "no-store",
      });

      if (response.ok) {
        const summaryData = await response.json();
        console.log("Loaded Gm summary data:", summaryData);

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        if (summaryData.totalCheckIns) {
          setTotalSystemCheckIns(summaryData.totalCheckIns);
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ checkInsToday ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        if (summaryData.checkInsToday >= 0) {
          console.log(`Setting checkInsToday from server: ${summaryData.checkInsToday}`);
        }
        
        // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ totalCheckIns ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢
        // ‡∏´‡∏≤‡∏Å streak ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô
        const userAddress = await signer?.getAddress();
        if (userAddress) {
          // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å localStorage ‡∏Å‡πà‡∏≠‡∏ô
          const localTotal = parseInt(localStorage.getItem(`totalCheckIns_${userAddress}`)) || 0;
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ totalCheckIns ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö checkInsToday ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (summaryData.totalCheckIns < summaryData.checkInsToday) {
            console.log(`Warning: Server totalCheckIns (${summaryData.totalCheckIns}) is less than checkInsToday (${summaryData.checkInsToday})`);
          }
          
          // ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô localStorage ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
          if (localTotal < summaryData.totalCheckIns) {
            console.log(`Updating user totalCheckIns from ${localTotal} to ${summaryData.totalCheckIns}`);
            localStorage.setItem(`totalCheckIns_${userAddress}`, summaryData.totalCheckIns.toString());
            setTotalCheckIns(summaryData.totalCheckIns);
          }
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ streaks ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (summaryData.maxStreak && userAddress) {
          const localStreak = parseInt(localStorage.getItem(`checkInStreak_${userAddress}`)) || 0;
          // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ streak ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          console.log(`Streak info: local=${localStreak}, server max=${summaryData.maxStreak}`);
        }
      } else {
        console.log("Failed to load Gm summary data:", response.status);
      }
      
      // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å summary.json ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å checkin_stats.json ‡πÅ‡∏ó‡∏ô
      try {
        const compatResponse = await fetch(`/checkin_stats.json?${cacheKey}`, {
          cache: "no-store",
        });
        
        if (compatResponse.ok) {
          const compatData = await compatResponse.json();
          console.log("Loaded compat checkin_stats.json data:", compatData);
          
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å checkin_stats.json
          if (compatData.stats) {
            const { totalCheckIns, checkInsToday } = compatData.stats;
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ totalSystemCheckIns
            if (totalCheckIns) {
              setTotalSystemCheckIns(totalCheckIns);
              console.log(`Updated totalSystemCheckIns from compat file: ${totalCheckIns}`);
            }
            
            // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ checkInsToday ‡∏Å‡πá‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
            if (checkInsToday >= 0) {
              console.log(`Setting checkInsToday from compat file: ${checkInsToday}`);
            }
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤ totalCheckIns ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            const userAddress = await signer?.getAddress();
            if (userAddress && totalCheckIns) {
              const localTotal = parseInt(localStorage.getItem(`totalCheckIns_${userAddress}`)) || 0;
              if (localTotal < totalCheckIns) {
                console.log(`Updating user totalCheckIns from ${localTotal} to ${totalCheckIns} (compat)`);
                localStorage.setItem(`totalCheckIns_${userAddress}`, totalCheckIns.toString());
                setTotalCheckIns(totalCheckIns);
              }
            }
          }
        }
      } catch (compatError) {
        console.error("Error loading compat checkin_stats.json:", compatError);
      }
    } catch (error) {
      console.error("Error loading Gm summary data:", error);
    }
  };

  /** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£ GM ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ */
  const gmToday = async () => {
    try {
      if (!signer) {
        console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö wallet ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
        return;
      }

      const userAddress = await signer.getAddress();
      const today = new Date().toDateString();
      const todayISO = new Date().toISOString().split("T")[0]; // YYYY-MM-DD

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wallet ‡∏ô‡∏µ‡πâ
      localStorage.setItem(`checkedInToday_${userAddress}`, "true");
      localStorage.setItem(`lastCheckInDate_${userAddress}`, today);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì streak
      let newStreak = checkInStreak;
      const lastDate = localStorage.getItem(`lastCheckInDate_${userAddress}`);
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ GM ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° streak
      if (lastDate !== today) {
        newStreak += 1;
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï streak
      localStorage.setItem(`checkInStreak_${userAddress}`, newStreak.toString());
      setCheckInStreak(newStreak);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô GM ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ totalCheckIns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      let newTotal = totalCheckIns;
      
      // ‡∏ñ‡πâ‡∏≤ totalCheckIns ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ undefined ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Å‡∏î GM
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ GM ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1
      if (!newTotal || newTotal <= 0) {
        newTotal = 1;
        console.log(`Setting initial totalCheckIns to 1`);
      } else {
        // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î GM ‡∏ã‡πâ‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î GM ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        if (lastDate !== today) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏° 1
          newTotal += 1;
          console.log(`Incrementing totalCheckIns to ${newTotal}`);
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î GM ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
          console.log(`Not incrementing totalCheckIns, already clicked today`);
        }
      }
      
      localStorage.setItem(`totalCheckIns_${userAddress}`, newTotal.toString());
      setTotalCheckIns(newTotal);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ GM ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
      setCheckedInToday(true);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      setMyTodayClicks((prev) => prev + 1);
      
      console.log(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£ GM ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: streak=${newStreak}, total=${newTotal}`);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å GM:", error);
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô transaction ‡∏ó‡∏µ‡πà pending
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const renderPendingTxs = () => {
    const count = pendingTransactions.size;
    return count ? (
      <div className="pending-tx-indicator" key={count}>
        {count} pending {count === 1 ? "transaction" : "transactions"}...
      </div>
    ) : null;
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // Pagination
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const totalPages = Math.ceil(leaderboard.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentItems = leaderboard.slice(startIndex, startIndex + itemsPerPage);

  const nextPage = () =>
    currentPage < totalPages && setCurrentPage((p) => p + 1);
  const prevPage = () => currentPage > 1 && setCurrentPage((p) => p - 1);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° Tea Sepolia Network
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const addTeaSepoliaNetwork = async () => {
    try {
      if (!window.ethereum) {
        toast.error("Please install MetaMask!");
        return;
      }
      await window.ethereum.request({
        method: "wallet_addEthereumChain",
        params: [
          {
            chainId: "0x27ea",
            chainName: "Tea Sepolia",
            nativeCurrency: { name: "TEA", symbol: "TEA", decimals: 18 },
            rpcUrls: ["https://tea-sepolia.g.alchemy.com/public"],
            blockExplorerUrls: ["https://sepolia.tea.xyz"],
          },
        ],
      });
      toast.success("Tea Sepolia added!");
    } catch (err) {
      console.error(err);
      toast.error("Failed to add Tea Sepolia");
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const checkAndShowCheckInPrompt = async () => {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    setShowCheckInModal(false);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!isConnected || !signer) return;

    try {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const hasCheckedIn = await loadUserGmData();

      // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Gm
      if (!hasCheckedIn && !checkedInToday) {
        setShowCheckInModal(true);
      }
    } catch (err) {
      console.error("Error in checkAndShowCheckInPrompt:", err);
    }
  };

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gm ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  useEffect(() => {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    setShowCheckInModal(false);

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    if (!isConnected || !signer || isConnecting) return;

    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Gm...");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å component unmount
    let isMounted = true;

    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏≤‡∏ô‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à)
    const timer = setTimeout(async () => {
      console.log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Gm...");

      try {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const hasCheckedIn = await loadUserGmData();
        console.log(
          "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hasCheckedIn:",
          hasCheckedIn,
          "checkedInToday:",
          checkedInToday,
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
        if (!isMounted) return;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Gm ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ error
        if (!hasCheckedIn && !checkedInToday) {
          console.log("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Gm ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm");
          setShowCheckInModal(true);
        } else {
          console.log("‡πÑ‡∏î‡πâ Gm ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á");
          setShowCheckInModal(false);
        }
      } catch (err) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
        if (!isMounted) return;

        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gm:", err);
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        setShowCheckInModal(false);
      }
    }, 2000); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount ‡∏´‡∏£‡∏∑‡∏≠ dependencies ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    return () => {
      console.log("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gm");
      clearTimeout(timer);
      isMounted = false;
    };
  }, [isConnected, signer, isConnecting]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ checkedInToday ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ Gm ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    if (checkedInToday) {
      setShowCheckInModal(false);
    }
  }, [checkedInToday]);

  // Add this debug effect to log whenever userRank changes
  useEffect(() => {
    console.log("Current userRank state:", userRank);
  }, [userRank]);

  // Function to navigate to the page containing the user's rank
  const goToUserRankPage = () => {
    if (userRank) {
      const page = Math.ceil(userRank / itemsPerPage);
      setCurrentPage(page);
    }
  };

  // Function to find user's rank in the leaderboard
  const findUserRankInLeaderboard = () => {
    try {
      if (!signer || !leaderboard.length) return null;
      
      const userAddress = signer.address;
      if (!userAddress) return null;
      
      const index = leaderboard.findIndex(
        entry => entry.user.toLowerCase() === userAddress.toLowerCase()
      );
      
      if (index >= 0) {
        return index + 1; // Return the actual rank
      }
      
      return null;
    } catch (error) {
      console.error("Error finding rank in leaderboard:", error);
      return null;
    }
  };

  // Create a separate component for user rank to handle display logic correctly
  const renderUserRank = () => {
    // Find the user's actual rank in the current leaderboard
    let displayRank = userRank;
    
    if (isConnected && signer) {
      try {
        // If we have a wallet connected but no rank, try to find it directly in the leaderboard
        if (!displayRank && leaderboard.length > 0) {
          const userAddress = signer.address;
          if (userAddress) {
            const index = leaderboard.findIndex(
              entry => entry.user.toLowerCase() === userAddress.toLowerCase()
            );
            if (index >= 0) {
              displayRank = index + 1;
              // If we found the rank here, update the state for future renders
              if (displayRank !== userRank) {
                console.log(`Setting rank from renderUserRank: ${displayRank}`);
                setUserRank(displayRank);
              }
            }
          }
        }
        
        // Apply highlighting to leaderboard if the user's rank is visible
        if (displayRank) {
          // Find which page the user is on
          const userPage = Math.ceil(displayRank / itemsPerPage);
          
          // If user is not on the current page, show a message
          if (userPage !== currentPage && displayRank) {
            console.log(`User is on page ${userPage}, current page is ${currentPage}`);
          }
        }
      } catch (error) {
        console.error("Error in renderUserRank:", error);
      }
    }
    
    return (
      <div className="user-rank-footer">
        <div className="user-rank-card">
          <div className="user-rank-title">Your Rank</div>
          <div className="user-rank-position">
            {displayRank ? `#${displayRank}` : "#--"}
          </div>
          <div className="user-rank-clicks">{myClicks.toLocaleString()} clicks</div>
          {displayRank && Math.ceil(displayRank / itemsPerPage) !== currentPage && (
            <button 
              className="go-to-rank-btn"
              onClick={goToUserRankPage}
            >
              Go to my rank
            </button>
          )}
        </div>
      </div>
    );
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const renderCheckInModal = () => {
    if (!showCheckInModal) return null;

    return (
      <div className="modal-overlay">
        <div className="modal-content checkin-modal">
          <div className="modal-header">
            <h2>Daily Gm</h2>
            <button
              className="close-button"
              onClick={() => setShowCheckInModal(false)}
            >
              √ó
            </button>
          </div>
          <div className="modal-body">
            <div className="checkin-icon">‚úì</div>
            <p>Welcome back! Say Gm today to continue your streak!</p>
            <p className="streak-count">Current streak: {checkInStreak} days</p>
          </div>
          <div className="modal-footer">
            <button className="checkin-button" onClick={handleCheckInClick}>
              Click to Gm
            </button>
          </div>
        </div>
      </div>
    );
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Gm ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
  const handleCheckInClick = async () => {
    try {
      // ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Gm ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setShowCheckInModal(false);

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ contract ‡∏´‡∏£‡∏∑‡∏≠ signer
      if (!isConnected || !contract || !signer) {
        toast.error("Please connect your wallet first");
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (!(await setupNetwork())) return;

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
      if (!isMuted) {
        clickAudioRef.current.currentTime = 0;
        clickAudioRef.current.play().catch(() => {});
      }

      // ‡∏™‡πà‡∏á transaction ‡πÑ‡∏õ‡∏¢‡∏±‡∏á smart contract (‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô click ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô)
      const tx = await contract.click();
      setPendingTransactions((prev) => new Set(prev).add(tx.hash));
      toast.info("Gm transaction sent. Waiting for confirmation...");

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const receipt = await waitForTransaction(tx);

      if (receipt.status === 1) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• on-chain
        await loadBlockchainData();
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gm ‡∏•‡∏á‡πÉ‡∏ô local storage
        await gmToday();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á block explorer
        toast.success(
          <div>
            Gm recorded! üåû Streak: {checkInStreak + 1} days
            <br />
            <a
              href={`https://sepolia.tea.xyz/tx/${tx.hash}`}
              target="_blank"
              rel="noopener noreferrer"
              style={{ color: "#4fd1c5" }}
            >
              View Transaction
            </a>
          </div>
        );

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô click ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
        const userAddress = await signer.getAddress();
        setMyTodayClicks((prev) => {
          const next = prev + 1;
          localStorage.setItem(`myTodayClicks_${userAddress}`, next.toString());
          return next;
        });
      }

      // ‡∏•‡∏ö transaction ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pending
      setPendingTransactions((prev) => {
        const next = new Set(prev);
        next.delete(tx.hash);
        return next;
      });
    } catch (txError) {
      console.error("Gm error:", txError);
      
      // ‡∏•‡∏ö pending status
      setPendingTransactions((prev) => {
        const next = new Set(prev);
        if (txError.hash) next.delete(txError.hash);
        return next;
      });
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î RPC
      if (txError.message && txError.message.includes("HTTP request failed")) {
        toast.error("Network connection error. Please try again later.");
      } else if (txError.code === "ACTION_REJECTED") {
        toast.error("Gm transaction rejected");
      } else if (txError.code === "INSUFFICIENT_FUNDS") {
        toast.error("Not enough TEA for gas");
      } else {
        toast.error("Gm transaction failed. Please try again.");
      }
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const waitForTransaction = async (tx) => {
    let retries = 0;
    const maxRetries = 2;
    const retryDelay = 15000; // 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    while (retries < maxRetries) {
      try {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const receipt = await tx.wait();
        return receipt;
      } catch (error) {
        retries++;
        console.error(`Transaction wait error (attempt ${retries}/${maxRetries}):`, error);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î RPC ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        if (error.message && error.message.includes("HTTP request failed")) {
          console.log(`RPC request failed. Retrying in ${retryDelay/1000} seconds...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          continue;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        throw error;
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    throw new Error(`Failed to get transaction receipt after ${maxRetries} attempts`);
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // Render UI
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  return (
    <div className="app-container">
      {/* ‡∏õ‡∏∏‡πà‡∏° mute/unmute ‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
      <div className="sound-control">
        <button
          className="glass-button icon-button"
          onClick={() => setIsMuted(!isMuted)}
        >
          {isMuted ? "üîá" : "üîä"}
        </button>
      </div>

      {/* Left Stats Panel */}
      <div className="left-panel">
        <div className="stats-panel glass-panel">
          <div className="stats-header">
            <h2>
              <div className="stats-icon">
                <div className="bar"></div>
                <div className="bar"></div>
                <div className="bar"></div>
              </div>
            </h2>
          </div>
          
          <div className="stats-content">
            <div className="stat-item">
              <span>Total Users</span>
              <span className="stat-value">{totalUsers.toLocaleString()}</span>
            </div>
            <div className="stat-item">
              <span>Total Clicks</span>
              <span className="stat-value">{totalClicks.toLocaleString()}</span>
            </div>
            <div className="stat-item">
              <span>Total Gm's</span>
              <span className="stat-value">
                {totalSystemCheckIns.toLocaleString()}
              </span>
            </div>

            {showFullStats && (
              <>
                <div className="stat-item">
                  <span>Your Clicks</span>
                  <span className="stat-value">{myClicks.toLocaleString()}</span>
                </div>
                <div className="stat-item">
                  <span>Today's Clicks</span>
                  <span className="stat-value">{myTodayClicks}</span>
                </div>
                <div className="stat-item">
                  <span>Gm Streak</span>
                  <span className="stat-value">
                    {checkInStreak} days {checkedInToday && "‚úì"}
                  </span>
                </div>
                <div className="stat-item">
                  <span>Your Gm's</span>
                  <span 
                    className="stat-value" 
                    title={`Last updated: ${new Date().toLocaleString()}`}
                  >
                    {totalCheckIns > 0 ? totalCheckIns : (checkedInToday ? "1" : "0")}
                  </span>
                </div>
              </>
            )}
          </div>

          <button
            className="show-more-button"
            onClick={() => setShowFullStats(!showFullStats)}
          >
            {showFullStats ? "Show Less" : "Show More"}
          </button>
        </div>
      </div>

      {/* Center Panel: Click Button */}
      <div className="center-panel">
        <div className="main-content">
          <div className="click-button-container">
            <button onClick={isConnected ? handleClick : openWalletSelector} className="click-button">
              {isConnected ? "CLICK" : "Connect Wallet"}
            </button>
            {renderPendingTxs()}
          </div>
        </div>
        <div className="bottom-buttons">
          <button 
            className="network-button bottom-btn"
            onClick={addTeaSepoliaNetwork}
          >
            Add Tea Sepolia Network
          </button>
          <button 
            className="tea-button bottom-btn"
            onClick={() => window.open("https://faucet-sepolia.tea.xyz/", "_blank")}
          >
            Get TEA
          </button>
        </div>
      </div>

      {/* Right Panel: Leaderboard */}
      <div className="right-panel">
        <div className="leaderboard-panel">
          <div className="leaderboard-header">
            <h2>üèÜ Leaderboard</h2>
            {lastLeaderboardUpdate && (
              <div className="last-update">
                Snapshot is scheduled for 30-04-25 23:11:58 UTC.
              </div>            
            )}
            {isConnected && (
              <div className="user-rank-display">
                <div className="user-rank-position">
                  #{userRank || findUserRankInLeaderboard() || "N/A"}
                </div>
                <div className="user-rank-clicks">{myClicks.toLocaleString()} clicks</div>
                {userRank && Math.ceil(userRank / itemsPerPage) !== currentPage && (
                  <button 
                    className="go-to-rank-btn small"
                    onClick={goToUserRankPage}
                  >
                    Go to my rank
                  </button>
                )}
              </div>
            )}
          </div>
            <div className="leaderboard-footer-text">
          <p>
             üëÄ Tap dat ass-et up the leaderboard. #1 gets their song featured all month!
          </p>
          <p>
             üí° Keep clicking to climb higher and earn more $ATL tokens!
          </p>
          </div>
          </div>

          <div className="leaderboard-content">
            <div className="leaderboard-header-columns">
              <div className="rank-header">Rank</div>
              <div className="address-header">Address</div>
              <div className="clicks-header">Clicks</div>
            </div>
            <div className="leaderboard-list">
              {currentItems.map((entry, i) => {
                const idx = startIndex + i;
                const isCurrentUser =
                  entry.user.toLowerCase() === signer?.address?.toLowerCase();
                return (
                  <div
                    key={entry.user} 
                    className={[
                      "leaderboard-item",
                      idx < 3 ? `top-${idx + 1}` : "",
                      isCurrentUser ? "current-user" : "",
                    ].join(" ")}
                  >
                    <div className="rank">#{idx + 1}</div>
                    <div className="address">
                      {entry.user.slice(0, 6)}...{entry.user.slice(-4)}
                    </div>
                    <div className="clicks">
                      {Number(entry.clicks).toLocaleString()}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          
              <div className="pagination">
      <button 
        className="pagination-btn" 
        onClick={prevPage}
        disabled={currentPage <= 1}
      >
        ‚óÄ
      </button>
      <span>Page {currentPage} of {totalPages}</span>
      <button 
        className="pagination-btn" 
        onClick={nextPage}
        disabled={currentPage >= totalPages}
      >
        ‚ñ∂
      </button>
    </div>

    {renderCheckInModal()}
    <WalletSelectorModal />
    <ToastContainer position="bottom-left" theme="dark" />
    <Analytics />

const App = () => {
  return (
    <div className="app-container">
      {/* Social Links */}
      <div className="social-links">
        <a
          href="https://x.com/atl5d"
          target="_blank"
          rel="noopener noreferrer"
          aria-label="X (Twitter)"
        >
          <FaXTwitter />
        </a>
      </div>
    </div>
  );
};

export default App;
